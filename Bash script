
HOW TO USE BASH 
A typical Bash script starts with a "shebang" (#!/bin/bash), which tells the system to use the Bash interpreter to run the script.

purpose of (#!/bin/bash) 
Interpreter Directive: It tells the operating system which interpreter to use to execute the script. In this case, it specifies that the script should be run using the Bash shell located at /bin/bash.

Portability: Including the shebang ensures that the script can be executed on any system where Bash is installed, without needing to specify the interpreter explicitly each time you run the script.

Script Execution: When you run a script with the shebang line, the system knows to invoke Bash to interpret the commands in the script.
variables: Variables are a basicly a container that stores values (commands or actions). b = ping 

bash commands
make sure you type (#!/bin/bash) before typing the rest
File and Directory Management:

ls: List files and directories in the current directory.
cd [directory]: Change to the specified directory.
mkdir [directory]: Create a new directory.
rmdir [directory]: Remove an empty directory.
rm [file]: Remove a file.
cp [source] [destination]: Copy files or directories.
mv [source] [destination]: Move or rename files or directories.
File Viewing and Manipulation:

cat [file]: Display the contents of a file.
less [file]: View a file one screen at a time.
head [file]: Display the first few lines of a file.
tail [file]: Display the last few lines of a file.
grep [pattern] [file]: Search for a pattern in a file.
System Information:

pwd: Print the current working directory.
whoami: Show the current user.
top: Display active processes and system resource usage.
df -h: Show disk space usage in a human-readable format.
free -h: Display memory usage in a human-readable format.
Process Management:

extra stuff:
pause script for a certian amount: sleep (number could range from 100000000 to 0.0000001 [nottested])
ps: Display currently running processes.
kill [PID]: Terminate a process by its process ID.
bg: Resume a suspended job in the background.
fg: Bring a job to the foreground.
Networking:

ping [hostname]: Test connectivity to a host.
curl [URL]: Retrieve data from a URL.
wget [URL]: Download files from the web.
Text Processing:

awk '{print $1}' [file]: Print the first column of a file.
sed 's/old/new/g' [file]: Replace occurrences of "old" with "new" in a file.
Permissions:

chmod [permissions] [file]: Change the file permissions.
example to make a file executable (chmod +x [filename])
chown [user]:[group] [file]: Change the file owner and group.
Searching:

find [path] -name [pattern]: Search for files and directories matching a pattern.
locate [file]: Quickly find files by name.

loops:
for: writes the list in a certian order, or (using ;then) can run a command depending on user input or statistic
while: loop continues AS long as a specified condition is true
until: loop continues UNTIL a specified condition becomes true
C-style for: variation of for loop that uses a c-like syntax (is a type of structure)
Nested Loop: a loop inside of a loop (loop[loop2])
you can use loops to process files in a directory 
how to make "shuf" randomly pick a sentence:
random_sentence=$(shuf -n 1 -e \
    "sentence" \
    "diffrentsentence" \
    "diffsentence2" \
    "diff diff sentence" \
    "diffx3sentence.")
echo "$random_sentence"
HOW RANDOMIZER WORKS:
shuf: This command shuffles lines of text or selects random lines from input.

-n 1: This option tells shuf to output only one sentence (or one entry) from the shuffled input.

-e: This option allows you to specify the list of entries^ directly in the command line.
Each entry that follows -e is treated as an option for shuffling (shuf).

The backslash at the end of the sentence is used to show that the command continues on the next line.
This allows you to break long commands into multiple lines for better readability.

The braket (on the start just before shuf and end of last sentence) clumps everything inside of it into one single command. And it also says that the commands are
defined together

Input output redirections:
> (Output Redirection)

Redirects standard output (stdout)(program) to a file.
creates file if it doesn't exist.
Does overwrite existing content if it exists.
for example: echo "something" > file.txt
>> (Append Output Redirection)

Appends standard output (stdout) to a file.
Creates the file if it doesn't exist.
Does NOT overwrite existing content if it exists.
Example: echo "World" >> file.txt
< (Input Redirection)

Redirects standard input (stdin) from a file into/infront of command.
Example: cat < file.txt
Piping (|)

takes the standard output (stdout) of one command and sends it to the standard input (stdin) of another command.
ends up combining two commands together.
(|) is not L, it is the thing under backspace and ontop of backslash!
for example: ls | less
Lists the contents of the current directory
and pipes the output to less, which lets you scroll through the list page by page.
cat file.txt | grep "error" | sort | uniq
this command line, takes the stuff from file.txt, finds the sentences that say error with grep, sort it so that it looks nice, and then remove duplicated lines.

